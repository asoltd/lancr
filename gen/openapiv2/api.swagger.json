{
  "swagger": "2.0",
  "info": {
    "title": "Lancr API",
    "description": "All of the methods require 'Authorization: Bearer \u003ctoken\u003e' header.",
    "version": "1.0",
    "contact": {
      "name": "ASO LTD",
      "url": "https://github.com/asoltd",
      "email": "piotr.jp.ostrowski@gmail.com"
    }
  },
  "tags": [
    {
      "name": "ApprenticeService"
    },
    {
      "name": "AuthService"
    },
    {
      "name": "HeroService"
    },
    {
      "name": "QuestService"
    },
    {
      "name": "TeamsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/apprentices": {
      "get": {
        "operationId": "ApprenticeService_ListApprentices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListApprenticesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ApprenticeService"
        ]
      },
      "post": {
        "operationId": "ApprenticeService_CreateApprentice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateApprenticeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApprenticeRequest"
            }
          }
        ],
        "tags": [
          "ApprenticeService"
        ]
      },
      "put": {
        "operationId": "ApprenticeService_UpdateApprentice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateApprenticeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateApprenticeRequest"
            }
          }
        ],
        "tags": [
          "ApprenticeService"
        ]
      }
    },
    "/v1/apprentices/{id}": {
      "get": {
        "operationId": "ApprenticeService_ReadApprentice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadApprenticeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApprenticeService"
        ]
      },
      "delete": {
        "operationId": "ApprenticeService_DeleteApprentice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteApprenticeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApprenticeService"
        ]
      }
    },
    "/v1/heroes": {
      "get": {
        "operationId": "HeroService_ListHeroes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListHeroesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "HeroService"
        ]
      },
      "post": {
        "operationId": "HeroService_CreateHero",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateHeroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateHeroRequest"
            }
          }
        ],
        "tags": [
          "HeroService"
        ]
      },
      "put": {
        "operationId": "HeroService_UpdateHero",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateHeroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateHeroRequest"
            }
          }
        ],
        "tags": [
          "HeroService"
        ]
      }
    },
    "/v1/heroes/{id}": {
      "get": {
        "operationId": "HeroService_ReadHero",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadHeroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HeroService"
        ]
      },
      "delete": {
        "operationId": "HeroService_DeleteHero",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteHeroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HeroService"
        ]
      }
    },
    "/v1/heroes:getQuestCreator": {
      "get": {
        "operationId": "HeroService_GetQuestCreator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetQuestCreatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "questId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HeroService"
        ]
      }
    },
    "/v1/heroes:getTotalHeroes": {
      "get": {
        "operationId": "HeroService_GetTotalHeroes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTotalHeroesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HeroService"
        ]
      }
    },
    "/v1/quests": {
      "get": {
        "operationId": "QuestService_ListQuests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListQuestsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "QuestService"
        ]
      },
      "post": {
        "operationId": "QuestService_CreateQuest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateQuestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateQuestRequest"
            }
          }
        ],
        "tags": [
          "QuestService"
        ]
      },
      "put": {
        "operationId": "QuestService_UpdateQuest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateQuestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateQuestRequest"
            }
          }
        ],
        "tags": [
          "QuestService"
        ]
      }
    },
    "/v1/quests/{id}": {
      "get": {
        "operationId": "QuestService_ReadQuest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadQuestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "QuestService"
        ]
      },
      "delete": {
        "operationId": "QuestService_DeleteQuest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteQuestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "QuestService"
        ]
      }
    },
    "/v1/quests:getTopQuesters": {
      "get": {
        "operationId": "QuestService_GetTopQuesters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTopQuestersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "QuestService"
        ]
      }
    },
    "/v1/teams": {
      "get": {
        "operationId": "TeamsService_ListTeams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTeamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "TeamsService"
        ]
      },
      "post": {
        "operationId": "TeamsService_CreateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTeamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTeamRequest"
            }
          }
        ],
        "tags": [
          "TeamsService"
        ]
      },
      "put": {
        "operationId": "TeamsService_UpdateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateTeamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateTeamRequest"
            }
          }
        ],
        "tags": [
          "TeamsService"
        ]
      }
    },
    "/v1/teams/{id}": {
      "get": {
        "operationId": "TeamsService_ReadTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadTeamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TeamsService"
        ]
      },
      "delete": {
        "operationId": "TeamsService_DeleteTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteTeamResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TeamsService"
        ]
      }
    }
  },
  "definitions": {
    "lancrv1Location": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        }
      }
    },
    "lancrv1Tag": {
      "type": "string",
      "enum": [
        "TAG_DESIGN_UNSPECIFIED",
        "TAG_MANAGEMENT",
        "TAG_RESEARCH",
        "TAG_PRESENTATION",
        "TAG_SOFTWAREDEVELOPMENT",
        "TAG_CUSTOMERSUCCESS",
        "TAG_LEADERSHIP"
      ],
      "default": "TAG_DESIGN_UNSPECIFIED"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Apprentice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "heroId": {
          "type": "string"
        },
        "rate": {
          "type": "number",
          "format": "float",
          "title": "rate is denominated in %, 10%, 20% etc"
        },
        "workingHours": {
          "$ref": "#/definitions/v1WorkingHours"
        },
        "mentors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Mentor"
          }
        },
        "favoriteTo": {
          "type": "string"
        },
        "workingDays": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ratings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Rating"
          }
        },
        "level": {
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "$ref": "#/definitions/lancrv1Location"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1AuthenticateResponse": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/v1Token"
        }
      }
    },
    "v1Bid": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "bidderId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "rate": {
          "type": "number",
          "format": "float"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "currency": {
          "type": "string"
        },
        "timeRequired": {
          "type": "string"
        },
        "workingTime": {
          "type": "string"
        },
        "questId": {
          "type": "string"
        },
        "apprentice": {
          "$ref": "#/definitions/v1Apprentice"
        },
        "apprenticeRate": {
          "type": "number",
          "format": "float"
        },
        "apprenticeCut": {
          "type": "number",
          "format": "float"
        },
        "totalEarnings": {
          "type": "number",
          "format": "float"
        },
        "status": {
          "type": "string"
        },
        "totalBidValue": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "v1CreateApprenticeRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Apprentice"
        }
      }
    },
    "v1CreateApprenticeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Apprentice"
        }
      }
    },
    "v1CreateHeroRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Hero"
        }
      }
    },
    "v1CreateHeroResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Hero"
        }
      }
    },
    "v1CreateQuestRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Quest"
        }
      }
    },
    "v1CreateQuestResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Quest"
        }
      }
    },
    "v1CreateTeamRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Team"
        }
      }
    },
    "v1CreateTeamResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Team"
        }
      }
    },
    "v1DeleteApprenticeResponse": {
      "type": "object",
      "title": "empty"
    },
    "v1DeleteHeroResponse": {
      "type": "object",
      "title": "empty response, code 200"
    },
    "v1DeleteQuestResponse": {
      "type": "object",
      "title": "empty response, code 200"
    },
    "v1DeleteTeamResponse": {
      "type": "object",
      "title": "empty"
    },
    "v1Experience": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "title": "ISO date string"
        },
        "endDate": {
          "type": "string"
        }
      },
      "title": "Experience might be another service possibly since it requires separate\nCRUD and might be nice to have it separate for D\u0026A workloads later on"
    },
    "v1FirebaseInfo": {
      "type": "object",
      "properties": {
        "signInProvider": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      }
    },
    "v1GetQuestCreatorResponse": {
      "type": "object",
      "properties": {
        "hero": {
          "$ref": "#/definitions/v1Hero"
        }
      }
    },
    "v1GetTopQuestersResponse": {
      "type": "object",
      "properties": {
        "topQuesters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Hero"
          }
        }
      }
    },
    "v1GetTotalHeroesResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1Hero": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firebaseId": {
          "type": "string",
          "title": "internal"
        },
        "name": {
          "$ref": "#/definitions/v1Name"
        },
        "visibility": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/lancrv1Location"
        },
        "userName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "workType": {
          "type": "string"
        },
        "subWorkType": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "experience": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Experience"
          }
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "xp": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1Hour": {
      "type": "object",
      "properties": {
        "hour": {
          "type": "integer",
          "format": "int32"
        },
        "minute": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Image": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "alt": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int64"
        },
        "height": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1Industry": {
      "type": "string",
      "enum": [
        "INDUSTRY_UNSPECIFIED",
        "INDUSTRY_FINTECH",
        "INDUSTRY_TECHNOLOGY",
        "INDUSTRY_ACCOUNTING",
        "INDUSTRY_CONSTRUCTION"
      ],
      "default": "INDUSTRY_UNSPECIFIED",
      "title": "same in case of RoleCategory"
    },
    "v1ListApprenticesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Apprentice"
          }
        },
        "nextPageToken": {
          "type": "integer",
          "format": "int32"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListHeroesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Hero"
          }
        },
        "nextPageToken": {
          "type": "integer",
          "format": "int32"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListQuestsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Quest"
          }
        },
        "nextPageToken": {
          "type": "integer",
          "format": "int32"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListTeamsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Team"
          }
        },
        "nextPageToken": {
          "type": "integer",
          "format": "int32"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Mentor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "heroId": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "skill": {
          "type": "string"
        },
        "maxRate": {
          "type": "number",
          "format": "float"
        },
        "minRate": {
          "type": "number",
          "format": "float"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1Name": {
      "type": "object",
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        }
      }
    },
    "v1Quest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "TODO should the IDs be created on the backend also?"
        },
        "creatorId": {
          "type": "string"
        },
        "reward": {
          "type": "number",
          "format": "float"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lancrv1Tag"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Image"
          }
        },
        "bidders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "TODO this has to be implemented at the backend level"
        },
        "summary": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1Rating": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "heroId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "rating": {
          "type": "integer",
          "format": "int32",
          "title": "rating denominated as from 1 to 5"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1ReadApprenticeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Apprentice"
        }
      }
    },
    "v1ReadHeroResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Hero"
        }
      }
    },
    "v1ReadQuestResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Quest"
        }
      }
    },
    "v1ReadTeamResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Team"
        }
      }
    },
    "v1RoleCategory": {
      "type": "string",
      "enum": [
        "ROLE_CATEGORY_UNSPECIFIED",
        "ROLE_CATEGORY_DESIGNER",
        "ROLE_CATEGORY_PRODUCT_DESIGNER",
        "ROLE_CATEGORY_SOFTWARE_DEVELOPMENT",
        "ROLE_CATEGORY_PRESENTOR",
        "ROLE_CATEGORY_MANAGER",
        "ROLE_CATEGORY_ENGINEER"
      ],
      "default": "ROLE_CATEGORY_UNSPECIFIED",
      "title": "the categories are not exhaustive, but are meant to be a starting point"
    },
    "v1Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "creatorId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "highlight": {
          "type": "string"
        },
        "industry": {
          "$ref": "#/definitions/v1Industry"
        },
        "image": {
          "type": "string",
          "title": "Image URL"
        },
        "timeEstimate": {
          "type": "string"
        },
        "bidders": {
          "$ref": "#/definitions/v1Bid"
        },
        "members": {
          "$ref": "#/definitions/v1Hero"
        },
        "roleCategories": {
          "$ref": "#/definitions/v1RoleCategory"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1Token": {
      "type": "object",
      "properties": {
        "authTime": {
          "type": "string",
          "format": "int64"
        },
        "issuer": {
          "type": "string"
        },
        "audience": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "int64"
        },
        "issuedAt": {
          "type": "string",
          "format": "int64"
        },
        "subject": {
          "type": "string"
        },
        "uid": {
          "type": "string",
          "title": "UID is the Firebase User ID"
        },
        "firebaseInfo": {
          "$ref": "#/definitions/v1FirebaseInfo"
        },
        "claims": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "TODO ammend the google.protobuf.Any if it turns out to be a string"
        }
      }
    },
    "v1UpdateApprenticeRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Apprentice"
        }
      }
    },
    "v1UpdateApprenticeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Apprentice"
        }
      }
    },
    "v1UpdateHeroRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Hero"
        }
      }
    },
    "v1UpdateHeroResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Hero"
        }
      }
    },
    "v1UpdateQuestRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Quest"
        }
      }
    },
    "v1UpdateQuestResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Quest"
        }
      }
    },
    "v1UpdateTeamRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1Team"
        }
      }
    },
    "v1UpdateTeamResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1Team"
        }
      }
    },
    "v1WorkingHours": {
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/v1Hour"
        },
        "end": {
          "$ref": "#/definitions/v1Hour"
        },
        "timezone": {
          "type": "string"
        }
      }
    }
  }
}
