package v1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type TeamORM struct {
	CreatedAt      *time.Time
	CreatorId      string
	Description    string
	Highlight      string
	Id             string
	Image          string
	Industry       string
	Members        *HeroORM `gorm:"foreignKey:TeamId;references:Id"`
	RoleCategories string
	TimeEstimate   string
	Title          string
}

// TableName overrides the default tablename generated by GORM
func (TeamORM) TableName() string {
	return "teams"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Team) ToORM(ctx context.Context) (TeamORM, error) {
	to := TeamORM{}
	var err error
	if prehook, ok := interface{}(m).(TeamWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.CreatorId = m.CreatorId
	to.Title = m.Title
	to.Description = m.Description
	to.Highlight = m.Highlight
	to.Industry = Industry_name[int32(m.Industry)]
	to.Image = m.Image
	to.TimeEstimate = m.TimeEstimate
	if m.Members != nil {
		tempMembers, err := m.Members.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Members = &tempMembers
	}
	to.RoleCategories = RoleCategory_name[int32(m.RoleCategories)]
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if posthook, ok := interface{}(m).(TeamWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TeamORM) ToPB(ctx context.Context) (Team, error) {
	to := Team{}
	var err error
	if prehook, ok := interface{}(m).(TeamWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.CreatorId = m.CreatorId
	to.Title = m.Title
	to.Description = m.Description
	to.Highlight = m.Highlight
	to.Industry = Industry(Industry_value[m.Industry])
	to.Image = m.Image
	to.TimeEstimate = m.TimeEstimate
	if m.Members != nil {
		tempMembers, err := m.Members.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Members = &tempMembers
	}
	to.RoleCategories = RoleCategory(RoleCategory_value[m.RoleCategories])
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if posthook, ok := interface{}(m).(TeamWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Team the arg will be the target, the caller the one being converted from

// TeamBeforeToORM called before default ToORM code
type TeamWithBeforeToORM interface {
	BeforeToORM(context.Context, *TeamORM) error
}

// TeamAfterToORM called after default ToORM code
type TeamWithAfterToORM interface {
	AfterToORM(context.Context, *TeamORM) error
}

// TeamBeforeToPB called before default ToPB code
type TeamWithBeforeToPB interface {
	BeforeToPB(context.Context, *Team) error
}

// TeamAfterToPB called after default ToPB code
type TeamWithAfterToPB interface {
	AfterToPB(context.Context, *Team) error
}

// DefaultCreateTeam executes a basic gorm create call
func DefaultCreateTeam(ctx context.Context, in *Team, db *gorm.DB) (*Team, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TeamORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTeam(ctx context.Context, in *Team, db *gorm.DB) (*Team, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TeamORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TeamORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TeamORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTeam(ctx context.Context, in *Team, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TeamORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TeamORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTeamSet(ctx context.Context, in []*Team, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TeamORM{})).(TeamORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TeamORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TeamORM{})).(TeamORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TeamORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Team, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Team, *gorm.DB) error
}

// DefaultStrictUpdateTeam clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTeam(ctx context.Context, in *Team, db *gorm.DB) (*Team, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTeam")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TeamORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterMembers := HeroORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterMembers.TeamId = new(string)
	*filterMembers.TeamId = ormObj.Id
	if err = db.Where(filterMembers).Delete(HeroORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TeamORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTeam executes a basic gorm update call with patch behavior
func DefaultPatchTeam(ctx context.Context, in *Team, updateMask *field_mask.FieldMask, db *gorm.DB) (*Team, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Team
	var err error
	if hook, ok := interface{}(&pbObj).(TeamWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTeam(ctx, &Team{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TeamWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTeam(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TeamWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTeam(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TeamWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TeamWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Team, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TeamWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Team, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TeamWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Team, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TeamWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Team, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTeam executes a bulk gorm update call with patch behavior
func DefaultPatchSetTeam(ctx context.Context, objects []*Team, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Team, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Team, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTeam(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTeam patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTeam(ctx context.Context, patchee *Team, patcher *Team, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Team, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedBidders bool
	var updatedMembers bool
	var updatedCreatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatorId" {
			patchee.CreatorId = patcher.CreatorId
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Highlight" {
			patchee.Highlight = patcher.Highlight
			continue
		}
		if f == prefix+"Industry" {
			patchee.Industry = patcher.Industry
			continue
		}
		if f == prefix+"Image" {
			patchee.Image = patcher.Image
			continue
		}
		if f == prefix+"TimeEstimate" {
			patchee.TimeEstimate = patcher.TimeEstimate
			continue
		}
		if !updatedBidders && strings.HasPrefix(f, prefix+"Bidders.") {
			if patcher.Bidders == nil {
				patchee.Bidders = nil
				continue
			}
			if patchee.Bidders == nil {
				patchee.Bidders = &Bid{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Bidders."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Bidders, patchee.Bidders, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Bidders" {
			updatedBidders = true
			patchee.Bidders = patcher.Bidders
			continue
		}
		if !updatedMembers && strings.HasPrefix(f, prefix+"Members.") {
			updatedMembers = true
			if patcher.Members == nil {
				patchee.Members = nil
				continue
			}
			if patchee.Members == nil {
				patchee.Members = &Hero{}
			}
			if o, err := DefaultApplyFieldMaskHero(ctx, patchee.Members, patcher.Members, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Members.", db); err != nil {
				return nil, err
			} else {
				patchee.Members = o
			}
			continue
		}
		if f == prefix+"Members" {
			updatedMembers = true
			patchee.Members = patcher.Members
			continue
		}
		if f == prefix+"RoleCategories" {
			patchee.RoleCategories = patcher.RoleCategories
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTeam executes a gorm list call
func DefaultListTeam(ctx context.Context, db *gorm.DB) ([]*Team, error) {
	in := Team{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TeamORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TeamORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Team{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TeamORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TeamORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TeamORM) error
}
