package v1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
	strings "strings"
)

type CourseORM struct {
	CreatedAt   int64
	CreatorId   string
	Description *string
	Id          string
	Provider    string
	Rating      int32
	Title       string
	Url         string
	Verified    bool
	Xp          int32
}

// TableName overrides the default tablename generated by GORM
func (CourseORM) TableName() string {
	return "courses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Course) ToORM(ctx context.Context) (CourseORM, error) {
	to := CourseORM{}
	var err error
	if prehook, ok := interface{}(m).(CourseWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Xp = m.Xp
	to.Verified = m.Verified
	to.Title = m.Title
	to.Description = m.Description
	to.Provider = m.Provider
	to.CreatorId = m.CreatorId
	to.Rating = m.Rating
	to.CreatedAt = m.CreatedAt
	// Repeated type string is not an ORMable message type
	to.Url = m.Url
	// Repeated type string is not an ORMable message type
	if posthook, ok := interface{}(m).(CourseWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CourseORM) ToPB(ctx context.Context) (Course, error) {
	to := Course{}
	var err error
	if prehook, ok := interface{}(m).(CourseWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Xp = m.Xp
	to.Verified = m.Verified
	to.Title = m.Title
	to.Description = m.Description
	to.Provider = m.Provider
	to.CreatorId = m.CreatorId
	to.Rating = m.Rating
	to.CreatedAt = m.CreatedAt
	// Repeated type string is not an ORMable message type
	to.Url = m.Url
	// Repeated type string is not an ORMable message type
	if posthook, ok := interface{}(m).(CourseWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Course the arg will be the target, the caller the one being converted from

// CourseBeforeToORM called before default ToORM code
type CourseWithBeforeToORM interface {
	BeforeToORM(context.Context, *CourseORM) error
}

// CourseAfterToORM called after default ToORM code
type CourseWithAfterToORM interface {
	AfterToORM(context.Context, *CourseORM) error
}

// CourseBeforeToPB called before default ToPB code
type CourseWithBeforeToPB interface {
	BeforeToPB(context.Context, *Course) error
}

// CourseAfterToPB called after default ToPB code
type CourseWithAfterToPB interface {
	AfterToPB(context.Context, *Course) error
}

// DefaultCreateCourse executes a basic gorm create call
func DefaultCreateCourse(ctx context.Context, in *Course, db *gorm.DB) (*Course, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CourseORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCourse(ctx context.Context, in *Course, db *gorm.DB) (*Course, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CourseORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CourseORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CourseORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCourse(ctx context.Context, in *Course, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CourseORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CourseORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCourseSet(ctx context.Context, in []*Course, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CourseORM{})).(CourseORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CourseORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CourseORM{})).(CourseORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CourseORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Course, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Course, *gorm.DB) error
}

// DefaultStrictUpdateCourse clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCourse(ctx context.Context, in *Course, db *gorm.DB) (*Course, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCourse")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CourseORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CourseORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCourse executes a basic gorm update call with patch behavior
func DefaultPatchCourse(ctx context.Context, in *Course, updateMask *field_mask.FieldMask, db *gorm.DB) (*Course, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Course
	var err error
	if hook, ok := interface{}(&pbObj).(CourseWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCourse(ctx, &Course{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CourseWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCourse(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CourseWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCourse(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CourseWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CourseWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Course, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CourseWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Course, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CourseWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Course, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CourseWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Course, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCourse executes a bulk gorm update call with patch behavior
func DefaultPatchSetCourse(ctx context.Context, objects []*Course, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Course, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Course, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCourse(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCourse patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCourse(ctx context.Context, patchee *Course, patcher *Course, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Course, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedImage bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Xp" {
			patchee.Xp = patcher.Xp
			continue
		}
		if f == prefix+"Verified" {
			patchee.Verified = patcher.Verified
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if !updatedImage && strings.HasPrefix(f, prefix+"Image.") {
			if patcher.Image == nil {
				patchee.Image = nil
				continue
			}
			if patchee.Image == nil {
				patchee.Image = &Image{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Image."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Image, patchee.Image, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Image" {
			updatedImage = true
			patchee.Image = patcher.Image
			continue
		}
		if f == prefix+"Provider" {
			patchee.Provider = patcher.Provider
			continue
		}
		if f == prefix+"CreatorId" {
			patchee.CreatorId = patcher.CreatorId
			continue
		}
		if f == prefix+"Rating" {
			patchee.Rating = patcher.Rating
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"EnrolledUsers" {
			patchee.EnrolledUsers = patcher.EnrolledUsers
			continue
		}
		if f == prefix+"Url" {
			patchee.Url = patcher.Url
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCourse executes a gorm list call
func DefaultListCourse(ctx context.Context, db *gorm.DB) ([]*Course, error) {
	in := Course{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CourseORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CourseORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Course{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CourseORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CourseORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CourseORM) error
}
