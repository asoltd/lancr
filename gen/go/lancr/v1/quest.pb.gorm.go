package v1

import (
	context "context"
	fmt "fmt"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
)

type QuestORM struct {
	CreatedAt   int64
	CreatorId   string
	Description string
	Id          string
	Level       uint32
	Reward      float32
	Status      string
	Summary     string
	Title       string
}

// TableName overrides the default tablename generated by GORM
func (QuestORM) TableName() string {
	return "quests"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Quest) ToORM(ctx context.Context) (QuestORM, error) {
	to := QuestORM{}
	var err error
	if prehook, ok := interface{}(m).(QuestWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.CreatorId = m.CreatorId
	to.Reward = m.Reward
	to.Title = m.Title
	to.Description = m.Description
	// Repeated type enum is not an ORMable message type
	// Repeated type Image is not an ORMable message type
	// Repeated type string is not an ORMable message type
	to.Status = m.Status
	to.CreatedAt = m.CreatedAt
	to.Summary = m.Summary
	to.Level = m.Level
	if posthook, ok := interface{}(m).(QuestWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *QuestORM) ToPB(ctx context.Context) (Quest, error) {
	to := Quest{}
	var err error
	if prehook, ok := interface{}(m).(QuestWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.CreatorId = m.CreatorId
	to.Reward = m.Reward
	to.Title = m.Title
	to.Description = m.Description
	// Repeated type enum is not an ORMable message type
	// Repeated type Image is not an ORMable message type
	// Repeated type string is not an ORMable message type
	to.Status = m.Status
	to.CreatedAt = m.CreatedAt
	to.Summary = m.Summary
	to.Level = m.Level
	if posthook, ok := interface{}(m).(QuestWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Quest the arg will be the target, the caller the one being converted from

// QuestBeforeToORM called before default ToORM code
type QuestWithBeforeToORM interface {
	BeforeToORM(context.Context, *QuestORM) error
}

// QuestAfterToORM called after default ToORM code
type QuestWithAfterToORM interface {
	AfterToORM(context.Context, *QuestORM) error
}

// QuestBeforeToPB called before default ToPB code
type QuestWithBeforeToPB interface {
	BeforeToPB(context.Context, *Quest) error
}

// QuestAfterToPB called after default ToPB code
type QuestWithAfterToPB interface {
	AfterToPB(context.Context, *Quest) error
}

// DefaultCreateQuest executes a basic gorm create call
func DefaultCreateQuest(ctx context.Context, in *Quest, db *gorm.DB) (*Quest, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type QuestORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadQuest(ctx context.Context, in *Quest, db *gorm.DB) (*Quest, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := QuestORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(QuestORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type QuestORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteQuest(ctx context.Context, in *Quest, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&QuestORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type QuestORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteQuestSet(ctx context.Context, in []*Quest, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&QuestORM{})).(QuestORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&QuestORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&QuestORM{})).(QuestORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type QuestORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Quest, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Quest, *gorm.DB) error
}

// DefaultStrictUpdateQuest clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateQuest(ctx context.Context, in *Quest, db *gorm.DB) (*Quest, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateQuest")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &QuestORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type QuestORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchQuest executes a basic gorm update call with patch behavior
func DefaultPatchQuest(ctx context.Context, in *Quest, updateMask *field_mask.FieldMask, db *gorm.DB) (*Quest, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Quest
	var err error
	if hook, ok := interface{}(&pbObj).(QuestWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadQuest(ctx, &Quest{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(QuestWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskQuest(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(QuestWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateQuest(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(QuestWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type QuestWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Quest, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type QuestWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Quest, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type QuestWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Quest, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type QuestWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Quest, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetQuest executes a bulk gorm update call with patch behavior
func DefaultPatchSetQuest(ctx context.Context, objects []*Quest, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Quest, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Quest, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchQuest(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskQuest patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskQuest(ctx context.Context, patchee *Quest, patcher *Quest, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Quest, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatorId" {
			patchee.CreatorId = patcher.CreatorId
			continue
		}
		if f == prefix+"Reward" {
			patchee.Reward = patcher.Reward
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
		if f == prefix+"Images" {
			patchee.Images = patcher.Images
			continue
		}
		if f == prefix+"Bidders" {
			patchee.Bidders = patcher.Bidders
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"Summary" {
			patchee.Summary = patcher.Summary
			continue
		}
		if f == prefix+"Level" {
			patchee.Level = patcher.Level
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListQuest executes a gorm list call
func DefaultListQuest(ctx context.Context, db *gorm.DB) ([]*Quest, error) {
	in := Quest{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []QuestORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(QuestORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Quest{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type QuestORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type QuestORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]QuestORM) error
}
