syntax = "proto3";

package lancr.v1;

import "google/api/annotations.proto";
import "lancr/v1/hero.proto";

import "proto/options/gorm.proto";

option go_package = "github.com/asoltd/lancr/gen/go/lancr/v1";

service HeroService {
  option (gorm.server).autogen = true;

  rpc ReadHero(ReadHeroRequest) returns (ReadHeroResponse) {
    option (google.api.http) = {
      // the name here could be like "/v1/{name=heroes/*}" in case you need a
      // longer placement, like heroes/123/transactions/124 for the transaction
      // with id 124 got to double-check that
      // idea: resources are in form
      // /v1/users/{user_id}/heroes/{hero_id}/transactions/{transaction_id},
      // if the user_id != user_id from token
      // prevent access
      get: "/v1/heroes/{id}"
    };
  }
  rpc ListHeroes(ListHeroesRequest) returns (ListHeroesResponse) {
    option (google.api.http) = {
      get: "/v1/heroes"
    };
  }
  rpc CreateHero(CreateHeroRequest) returns (CreateHeroResponse) {
    option (google.api.http) = {
      post: "/v1/heroes"
      body: "*"
    };
  }
  rpc UpdateHero(UpdateHeroRequest) returns (UpdateHeroResponse) {
    option (google.api.http) = {
      put: "/v1/heroes"
      body: "*"
    };
  }
  rpc DeleteHero(DeleteHeroRequest) returns (DeleteHeroResponse) {
    option (gorm.method).object_type = "Hero";
    option (google.api.http) = {
      delete: "/v1/heroes/{id}"
    };
  }
  rpc GetTotalHeroes(GetTotalHeroesRequest) returns (GetTotalHeroesResponse) {
    option (google.api.http) = {
      get: "/v1/heroes:getTotalHeroes"
    };
  }
  rpc GetQuestCreator(GetQuestCreatorRequest)
      returns (GetQuestCreatorResponse) {
    option (google.api.http) = {
      get: "/v1/heroes:getQuestCreator"
    };
  }
}

message ReadHeroRequest {
  string id = 1;
}

message ReadHeroResponse {
  Hero result = 1;
}

message ListHeroesRequest {
  int32 page_size = 1;
  int32 page_token = 2;
}

message ListHeroesResponse {
  repeated Hero results = 1;
  int32 next_page_token = 2;
  int32 total_size = 3;
}

message CreateHeroRequest {
  Hero payload = 2;
}

message CreateHeroResponse {
  Hero result = 1;
}

message UpdateHeroRequest {
  Hero payload = 1;

  // If set to true, and the hero is not found, a new hero will be created.
  // currently unsuported
  // bool allow_missing = 2;
}

message UpdateHeroResponse {
  Hero result = 1;
}

message DeleteHeroRequest {
  string id = 1;
}

message DeleteHeroResponse {
  // empty response, code 200
}

message GetTotalHeroesRequest {}

message GetTotalHeroesResponse {
  uint32 total = 1;
}

message GetQuestCreatorRequest {
  string quest_id = 1;
}

message GetQuestCreatorResponse {
  Hero hero = 1;
}