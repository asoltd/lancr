syntax = "proto3";

package lancr.v1;

import "google/api/annotations.proto";
import "proto/lancr/v1/hero.proto";

option go_package = "github.com/asoltd/lancr/gen/go/lancr/v1";

message GetHeroRequest {
  string id = 1;
}

message GetHeroResponse {
  Hero hero = 1;
}

message ListHeroesRequest {
  int32 page_size = 1;
  int32 page_token = 2;
}

message ListHeroesResponse {
  repeated Hero heroes = 1;
  int32 next_page_token = 2;
  int32 total_size = 3;
  int32 page_size = 4;
}

message CreateHeroRequest {
  Hero hero = 1;
}

message CreateHeroResponse {
  Hero hero = 1;
}

message UpdateHeroRequest {
  string id = 1;
  Hero hero = 2;

  // If set to true, and the hero is not found, a new hero will be created.
  bool allow_missing = 3;
}

message UpdateHeroResponse {
  Hero hero = 1;
}

message DeleteHeroRequest {
  string id = 1;
}

message DeleteHeroResponse {
  // empty response, code 200
}

service HeroService {
  rpc GetHero(GetHeroRequest) returns (GetHeroResponse) {
    option (google.api.http) = {
      // TODO not sure here if it should not be
      // "/v1/{name=heroes/*}"
      // got to double-check that
      get: "/v1/heroes/{id}"
    };
  }
  // below methods yet to be implemented, functionality will be rolled out
  // incrementally I will set up tests for every method, doing an initial
  // deployment since frontend needs to start migration so anything defined has
  // to work

  rpc ListHeroes(ListHeroesRequest) returns (ListHeroesResponse) {
    option (google.api.http) = {
      get: "/v1/heroes"
    };
  }
  rpc CreateHero(CreateHeroRequest) returns (CreateHeroResponse) {
    option (google.api.http) = {
      post: "/v1/heroes"
      body: "*"
    };
  }
  rpc UpdateHero(UpdateHeroRequest) returns (UpdateHeroResponse) {
    option (google.api.http) = {
      put: "/v1/heroes/{id}"
      body: "*"
    };
  }
  rpc DeleteHero(DeleteHeroRequest) returns (DeleteHeroResponse) {
    option (google.api.http) = {
      delete: "/v1/heroes/{id}"
    };
  }
}
